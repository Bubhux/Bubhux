<svg xmlns="http://www.w3.org/2000/svg" width="480" height="1911" class="">
    <defs>
        <style/>
    </defs>
    <style>@keyframes animation-gauge{0%{stroke-dasharray:0 329}}@keyframes animation-rainbow{0%,to{color:#7f00ff;fill:#7f00ff}14%{color:#a933ff;fill:#a933ff}29%{color:#007fff;fill:#007fff}43%{color:#00ff7f;fill:#00ff7f}57%{color:#ff0;fill:#ff0}71%{color:#ff7f00;fill:#ff7f00}86%{color:red;fill:red}}svg{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:14px;color:#777}h2{margin:8px 0 2px;padding:0;color:#0366d6;font-weight:400;font-size:16px}h2 svg{fill:currentColor}section&gt;.field{margin-left:5px;margin-right:5px}.field{display:flex;align-items:center;margin-bottom:2px;white-space:nowrap}.field svg{margin:0 8px;fill:#959da5;flex-shrink:0}.row{display:flex;flex-wrap:wrap}.row section{flex:1 1 0}.deleted{color:#da3633}.snippet .body{padding-left:12px}.snippet .language-diff{font-size:77%}.snippet.additions{color:#336543}.snippet.deletions{color:#9a5256}.snippet .token.prefix.unchanged{visibility:hidden}code,span.code{background-color:#7777771f;padding:1px 5px;font-size:80%;border-radius:6px;color:#777;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace}code{display:inline-block}code[class^=language-]{white-space:pre-wrap;width:97%;margin-top:4px}span.code{margin:0 4px -3px}.token.coord{color:#d2a8ff;font-weight:700}.token.inserted:not(.prefix){color:#aad0b4dc;background-color:#336543dc}.token.deleted:not(.prefix){color:#eed2d0dc;background-color:#9a5256dc}.space{margin-left:7px}.blue{color:#58a6ff}:root{--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-halloween-graph-day-L1-bg:#ffee4a;--color-calendar-halloween-graph-day-L2-bg:#ffc501;--color-calendar-halloween-graph-day-L3-bg:#fe9600;--color-calendar-halloween-graph-day-L4-bg:#03001c;--color-calendar-winter-graph-day-L1-bg:#0a3069;--color-calendar-winter-graph-day-L2-bg:#0969da;--color-calendar-winter-graph-day-L3-bg:#54aeff;--color-calendar-winter-graph-day-L4-bg:#b6e3ff;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06)}#metrics-end{width:100%}</style>
    <style/>
    <foreignObject x="0" y="0" width="100%" height="100%">
        <div xmlns="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" class="items-wrapper">
            <section>
                <h2 class="field">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                        <path fill-rule="evenodd" d="M4 1.75C4 .784 4.784 0 5.75 0h5.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0114.25 15h-9a.75.75 0 010-1.5h9a.25.25 0 00.25-.25V6h-2.75A1.75 1.75 0 0110 4.25V1.5H5.75a.25.25 0 00-.25.25v2.5a.75.75 0 01-1.5 0v-2.5zm7.5-.188V4.25c0 .138.112.25.25.25h2.688a.252.252 0 00-.011-.013l-2.914-2.914a.272.272 0 00-.013-.011zM5.72 6.72a.75.75 0 000 1.06l1.47 1.47-1.47 1.47a.75.75 0 101.06 1.06l2-2a.75.75 0 000-1.06l-2-2a.75.75 0 00-1.06 0zM3.28 7.78a.75.75 0 00-1.06-1.06l-2 2a.75.75 0 000 1.06l2 2a.75.75 0 001.06-1.06L1.81 9.25l1.47-1.47z"/>
                    </svg>
                    Code snippet of the day
                </h2>
                <div class="row">
                    <section class="largeable-column-fields">
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"/>
                            </svg>
                            From
                            <span class="blue space">Bubhux/StudentManager-Web-App</span>
                        </div>
                    </section>
                    <section class="largeable-column-fields">
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0zM8 0a8 8 0 100 16A8 8 0 008 0zm.5 4.75a.75.75 0 00-1.5 0v3.5a.75.75 0 00.471.696l2.5 1a.75.75 0 00.557-1.392L8.5 7.742V4.75z"/>
                            </svg>
                            On 15 Apr 2025, 15:13:33
                        </div>
                    </section>
                </div>
                <div class="row">
                    <section class="largeable-column-fields">
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M10.5 7.75a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm1.43.75a4.002 4.002 0 01-7.86 0H.75a.75.75 0 110-1.5h3.32a4.001 4.001 0 017.86 0h3.32a.75.75 0 110 1.5h-3.32z"/>
                            </svg>
                            Mise à jour V.1.2
 Changes to be committed:
	modified:   student/models.py
                        </div>
                        <div class="field">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16">
                                <path fill-rule="evenodd" d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z"/>
                            </svg>
                            <span class="code">f9871e1c</span>
                            <span class="code">student/models.py</span>
                            <span class="code">
                                <span class="snippet additions">++117</span>
                                <span class="snippet deletions">--1</span>
                            </span>
                        </div>
                    </section>
                </div>
                <div class="row">
                    <section class="snippet">
                        <div class="body markdown">
                            <code class="language-diff" xml:space="preserve"><span class="token coord">@@ -1,3 +1,119 @@</span><br /><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"># student/models.py<br /></span></span><span class="token unchanged"><span class="token prefix unchanged">·</span><span class="token line">from django.db import models<br /></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">from django.contrib.auth.models import AbstractUser<br /></span><span class="token prefix inserted">+</span><span class="token line">from django.core.exceptions import ValidationError<br /></span><span class="token prefix inserted">+</span><span class="token line">from classroom.models import Classroom<br /></span></span><span class="token unchanged"><span class="token prefix unchanged">·</span><span class="token line"><br /></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"># Create your models here.<br /></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"># Modèle de la leçon<br /></span><span class="token prefix inserted">+</span><span class="token line">class Lesson(models.Model):<br /></span><span class="token prefix inserted">+</span><span class="token line">   name = models.CharField(max_length=255)<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   def __str__(self):<br /></span><span class="token prefix inserted">+</span><span class="token line">       return self.name<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line"># Modèle intermédiaire entre Student et Lesson, qui stocke également la note<br /></span><span class="token prefix inserted">+</span><span class="token line">class StudentLesson(models.Model):<br /></span><span class="token prefix inserted">+</span><span class="token line">   student = models.ForeignKey('Student', on_delete=models.CASCADE)<br /></span><span class="token prefix inserted">+</span><span class="token line">   lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)<br /></span><span class="token prefix inserted">+</span><span class="token line">   grade = models.DecimalField(max_digits=4, decimal_places=2, null=True, blank=True)<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   class Meta:<br /></span><span class="token prefix inserted">+</span><span class="token line">       unique_together = ('student', 'lesson')<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   def __str__(self):<br /></span><span class="token prefix inserted">+</span><span class="token line">       return f"{self.student} - {self.lesson} : {self.grade}"<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line"># Modèle Student<br /></span><span class="token prefix inserted">+</span><span class="token line">class Student(AbstractUser):<br /></span><span class="token prefix inserted">+</span><span class="token line">   classroom = models.ForeignKey(<br /></span><span class="token prefix inserted">+</span><span class="token line">       Classroom,<br /></span><span class="token prefix inserted">+</span><span class="token line">       on_delete=models.SET_NULL,<br /></span><span class="token prefix inserted">+</span><span class="token line">       null=True,<br /></span><span class="token prefix inserted">+</span><span class="token line">       blank=True,<br /></span><span class="token prefix inserted">+</span><span class="token line">       related_name="students"<br /></span><span class="token prefix inserted">+</span><span class="token line">   )<br /></span><span class="token prefix inserted">+</span><span class="token line">   # Relation ManyToMany via le modèle intermédiaire StudentLesson<br /></span><span class="token prefix inserted">+</span><span class="token line">   lessons = models.ManyToManyField(Lesson, through='StudentLesson', blank=True)<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   # Redéfinition des champs hérités pour éviter le conflit de related_name<br /></span><span class="token prefix inserted">+</span><span class="token line">   groups = models.ManyToManyField(<br /></span><span class="token prefix inserted">+</span><span class="token line">       'auth.Group',<br /></span><span class="token prefix inserted">+</span><span class="token line">       blank=True,<br /></span><span class="token prefix inserted">+</span><span class="token line">       related_name='student_set',<br /></span><span class="token prefix inserted">+</span><span class="token line">       help_text='The groups this user belongs to.',<br /></span><span class="token prefix inserted">+</span><span class="token line">       verbose_name='groups'<br /></span><span class="token prefix inserted">+</span><span class="token line">   )<br /></span><span class="token prefix inserted">+</span><span class="token line">   user_permissions = models.ManyToManyField(<br /></span><span class="token prefix inserted">+</span><span class="token line">       'auth.Permission',<br /></span><span class="token prefix inserted">+</span><span class="token line">       blank=True,<br /></span><span class="token prefix inserted">+</span><span class="token line">       related_name='student_set_permissions',<br /></span><span class="token prefix inserted">+</span><span class="token line">       help_text='Specific permissions for this user.',<br /></span><span class="token prefix inserted">+</span><span class="token line">       verbose_name='user permissions'<br /></span><span class="token prefix inserted">+</span><span class="token line">   )<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   def __str__(self):<br /></span><span class="token prefix inserted">+</span><span class="token line">       return f"Étudiant {self.first_name} {self.last_name}"<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   def update_student_info(self, first_name=None, last_name=None, classroom=None, lessons=None, grades=None):<br /></span><span class="token prefix inserted">+</span><span class="token line">       """<br /></span><span class="token prefix inserted">+</span><span class="token line">       Met à jour les informations de l'étudiant, la classe, et éventuellement ses lessons et les notes associées.<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">       :param first_name: Nouveau prénom (optionnel).<br /></span><span class="token prefix inserted">+</span><span class="token line">       :param last_name: Nouveau nom de famille (optionnel).<br /></span><span class="token prefix inserted">+</span><span class="token line">       :param classroom: Nouvelle instance de Classroom (optionnel).<br /></span><span class="token prefix inserted">+</span><span class="token line">       :param lessons: Liste d'instances de Lesson (optionnel).<br /></span><span class="token prefix inserted">+</span><span class="token line">       :param grades: Liste de notes associées aux lessons (optionnel).<br /></span><span class="token prefix inserted">+</span><span class="token line">       """<br /></span><span class="token prefix inserted">+</span><span class="token line">       if first_name:<br /></span><span class="token prefix inserted">+</span><span class="token line">           self.first_name = first_name<br /></span><span class="token prefix inserted">+</span><span class="token line">       if last_name:<br /></span><span class="token prefix inserted">+</span><span class="token line">           self.last_name = last_name<br /></span><span class="token prefix inserted">+</span><span class="token line">       if classroom is not None:<br /></span><span class="token prefix inserted">+</span><span class="token line">           self.classroom = classroom<br /></span><span class="token prefix inserted">+</span><span class="token line">       self.save()<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">       # Gestion des lessons et des grades<br /></span><span class="token prefix inserted">+</span><span class="token line">       if lessons is not None:<br /></span><span class="token prefix inserted">+</span><span class="token line">           if grades is not None:<br /></span><span class="token prefix inserted">+</span><span class="token line">               if len(lessons) != len(grades):<br /></span><span class="token prefix inserted">+</span><span class="token line">                   raise ValidationError("Le nombre de lessons et de grades doit être identique.")<br /></span><span class="token prefix inserted">+</span><span class="token line">               # Réinitialiser les lessons avant de mettre à jour<br /></span><span class="token prefix inserted">+</span><span class="token line">               self.lessons.clear()<br /></span><span class="token prefix inserted">+</span><span class="token line">               for lesson, grade in zip(lessons, grades):<br /></span><span class="token prefix inserted">+</span><span class="token line">                   StudentLesson.objects.update_or_create(<br /></span><span class="token prefix inserted">+</span><span class="token line">                       student=self,<br /></span><span class="token prefix inserted">+</span><span class="token line">                       lesson=lesson,<br /></span><span class="token prefix inserted">+</span><span class="token line">                       defaults={'grade': grade}<br /></span><span class="token prefix inserted">+</span><span class="token line">                   )<br /></span><span class="token prefix inserted">+</span><span class="token line">           else:<br /></span><span class="token prefix inserted">+</span><span class="token line">               # Si seules les lessons sont fournies, on les affecte sans gestion des grades<br /></span><span class="token prefix inserted">+</span><span class="token line">               self.lessons.set(lessons)<br /></span><span class="token prefix inserted">+</span><span class="token line">       elif grades is not None:<br /></span><span class="token prefix inserted">+</span><span class="token line">           # Si uniquement les grades sont fournis, on met à jour les grades pour les lessons existantes<br /></span><span class="token prefix inserted">+</span><span class="token line">           current_lessons = list(self.lessons.all())<br /></span><span class="token prefix inserted">+</span><span class="token line">           if len(current_lessons) != len(grades):<br /></span><span class="token prefix inserted">+</span><span class="token line">               raise ValidationError("Le nombre de grades doit correspondre aux lessons actuelles.")<br /></span><span class="token prefix inserted">+</span><span class="token line">           for lesson, grade in zip(current_lessons, grades):<br /></span><span class="token prefix inserted">+</span><span class="token line">               StudentLesson.objects.update_or_create(<br /></span><span class="token prefix inserted">+</span><span class="token line">                   student=self,<br /></span><span class="token prefix inserted">+</span><span class="token line">                   lesson=lesson,<br /></span><span class="token prefix inserted">+</span><span class="token line">                   defaults={'grade': grade}<br /></span><span class="token prefix inserted">+</span><span class="token line">               )<br /></span><span class="token prefix inserted">+</span><span class="token line"><br /></span><span class="token prefix inserted">+</span><span class="token line">   def validate_input_data_student(self):<br /></span><span class="token prefix inserted">+</span><span class="token line">       """<br /></span><span class="token prefix inserted">+</span><span class="token line">       Valide les notes associées aux lessons de l'étudiant.<br /></span><span class="token prefix inserted">+</span><span class="token line">       Pour chaque relation StudentLesson, si la note n'est pas nulle ou vide,<br /></span><span class="token prefix inserted">+</span><span class="token line">       elle doit être convertible en float et comprise entre 0 et 20 inclusivement.<br /></span><span class="token prefix inserted">+</span><span class="token line">       """<br /></span><span class="token prefix inserted">+</span><span class="token line">       for student_lesson in self.studentlesson_set.all():<br /></span><span class="token prefix inserted">+</span><span class="token line">           grade = student_lesson.grade<br /></span><span class="token prefix inserted">+</span><span class="token line">           if grade in (None, ''):<br /></span><span class="token prefix inserted">+</span><span class="token line">               continue<br /></span><span class="token prefix inserted">+</span><span class="token line">           try:<br /></span><span class="token prefix inserted">+</span><span class="token line">               grade_value = float(grade)<br /></span><span class="token prefix inserted">+</span><span class="token line">               if not (0 &lt;= grade_value &lt;= 20):<br /></span><span class="token prefix inserted">+</span><span class="token line">                   return False<br /></span><span class="token prefix inserted">+</span><span class="token line">           except (ValueError, TypeError):<br /></span><span class="token prefix inserted">+</span><span class="token line">               return False<br /></span><span class="token prefix inserted">+</span><span class="token line">       return True</span></span></code>
                        </div>
                    </section>
                </div>
            </section>
        </div>
        <div xmlns="http://www.w3.org/1999/xhtml" id="metrics-end"></div>
    </foreignObject>
</svg>